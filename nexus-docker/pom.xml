<?xml version="1.0" encoding="UTF-8"?>
<project
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.github.a-langer</groupId>
        <artifactId>nexus-sso</artifactId>
        <version>3.70.1</version>
        <relativePath>..</relativePath>
    </parent>
    <artifactId>nexus-docker</artifactId>
    <packaging>pom</packaging>

    <properties>
        <nexus.base.image>sonatype/nexus3:${nexus.base.version}-java11-ubi</nexus.base.image>
        <docker.image>ghcr.io/a-langer/nexus-sso:${project.version}-java11-ubi</docker.image>
        <!-- <ansiblegalaxy.version>0.3.2-fixed</ansiblegalaxy.version> -->
        <ansiblegalaxy.version>0.3.3</ansiblegalaxy.version>
    </properties>

    <profiles>
        <!--
            mvn clean install -PbuildImage
            mvn -pl nexus-docker -am clean install -PbuildImage
        -->
        <profile>
            <id>buildImage</id>
            <build>
                <plugins>
                    <!--
                        A Nexus Repository 3 plugin that allows usage of Ansible Galaxy repositories. 
                        Origin https://github.com/l3ender/nexus-repository-ansiblegalaxy
                        Fork with galaxy v3 support https://github.com/angeloxx/nexus-repository-ansiblegalaxy
                        Maven repository https://jitpack.io/#angeloxx/nexus-repository-ansiblegalaxy
                        mvn dependency:copy -PbuildImage 
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-ansiblegalaxy-plugin</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <!-- TODO Ansiblegalaxy plugin does not support new storage API, see https://github.com/l3ender/nexus-repository-ansiblegalaxy/issues/25 -->
                            <skip>true</skip>
                            <artifactItems>
                                <artifactItem>
                                    <!-- <groupId>com.github.angeloxx.nexus-repository-ansiblegalaxy</groupId> -->
                                    <groupId>org.sonatype.nexus.plugins</groupId>
                                    <artifactId>nexus-repository-ansiblegalaxy</artifactId>
                                    <version>${ansiblegalaxy.version}</version>
                                    <type>jar</type>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>get-migrator-utility</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target description="Get Database Migrator Utility">
                                        <echo>Download nexus-db-migrator, see https://help.sonatype.com/en/orientdb-downloads.html</echo>
                                        <get src="https://download.sonatype.com/nexus/nxrm3-migrator/nexus-db-migrator-3.70.3-01.jar" dest="target" skipexisting="true" />
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-prepare</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target description="Change Dockerfile">
                                        <echo>Set NEXUS_IMAGE="${docker.image}" to .env</echo>
                                        <replaceregexp file="${maven.multiModuleProjectDirectory}/.env" byline="true"
                                            match="NEXUS_IMAGE=(.*)"
                                            replace='NEXUS_IMAGE="$${NEXUS_IMAGE:-${docker.image}}"' />

                                        <echo>Set NEXUS_BASE_IMAGE="${nexus.base.image}" to Dockerfile</echo>
                                        <replaceregexp file="${maven.multiModuleProjectDirectory}/Dockerfile" byline="true"
                                            match="ARG NEXUS_BASE_IMAGE=(.*)"
                                            replace='ARG NEXUS_BASE_IMAGE="${nexus.base.image}"' />

                                        <echo>Set NEXUS_PLUGIN_VERSION="${nexus.plugin.version}" to Dockerfile</echo>
                                        <replaceregexp file="${maven.multiModuleProjectDirectory}/Dockerfile" byline="true"
                                            match="ARG NEXUS_PLUGIN_VERSION=(.*)"
                                            replace='ARG NEXUS_PLUGIN_VERSION="${nexus.plugin.version}"' />

                                        <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
                                        <propertyregex property="image.tag" input="${docker.image}" regexp="^.*\:(.*)$" select="\1" />
                                        <echo>Set size?tag=${image.tag} to README.md</echo>
                                        <replaceregexp file="${maven.multiModuleProjectDirectory}/README.md" byline="true"
                                            match=".*/a-langer/nexus-sso/size\?tag=(.*)"
                                            replace='[![image-size](https://ghcr-badge.deta.dev/a-langer/nexus-sso/size?tag=${image.tag})][0]' />

                                        <echo>Set ANSIBLEGALAXY_VERSION="${ansiblegalaxy.version}" to Dockerfile</echo>
                                        <replaceregexp file="${maven.multiModuleProjectDirectory}/Dockerfile" byline="true"
                                            match="ARG ANSIBLEGALAXY_VERSION=(.*)"
                                            replace='ARG ANSIBLEGALAXY_VERSION="${ansiblegalaxy.version}"' />
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>ant-contrib</groupId>
                                <artifactId>ant-contrib</artifactId>
                                <version>1.0b3</version>
                                <exclusions>
                                    <exclusion>
                                        <groupId>ant</groupId>
                                        <artifactId>ant</artifactId>
                                    </exclusion>
                                </exclusions>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.0.0</version>
                        <executions>
                            <!-- Create new docker image using Dockerfile -->
                            <execution>
                                <id>docker-build</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.parent.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>build</argument>
                                        <argument>--build-arg</argument>
                                        <argument>NEXUS_BASE_IMAGE=${nexus.base.image}</argument>
                                        <argument>--build-arg</argument>
                                        <argument>NEXUS_PLUGIN_VERSION=${nexus.plugin.version}</argument>
                                        <argument>--build-arg</argument>
                                        <argument>ANSIBLEGALAXY_VERSION=${ansiblegalaxy.version}</argument>
                                        <argument>--no-cache</argument>
                                        <argument>-t</argument>
                                        <argument>${docker.image}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Remove existing image from local repo -->
                            <execution>
                                <id>docker-clean</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.parent.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>image</argument>
                                        <argument>prune</argument>
                                        <argument>--force</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Remove build cache, use "docker system df" -->
                            <execution>
                                <id>docker-clean-cache</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.parent.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>builder</argument>
                                        <argument>prune</argument>
                                        <argument>--force</argument>
                                        <argument>--filter</argument>
                                        <argument>until=24h</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Login and Push the image to a docker repo -->
                            <execution>
                                <id>docker-login</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.parent.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>login</argument>
                                        <argument>-u</argument>
                                        <argument>${docker.user}</argument>
                                        <argument>-p</argument>
                                        <argument>${docker.password}</argument>
                                        <argument>${docker.url}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-push</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.parent.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>push</argument>
                                        <argument>${docker.image}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>